@page
@using System.Net.Http
@using Enums
@using Models
@using Services
@model ProjectPageModel

<div id="ProjectPage">
    <ul class="nav nav-tabs">
        <li class="nav-item">
            <a data-toggle="tab" href="#tabDataSources" class="nav-link active">@Localization.LabelDataSources</a>
        </li>
        <li class="nav-item">
            <a data-toggle="tab" href="#tabTableMapping" class="nav-link">@Localization.LabelTableMapping</a>
        </li>
        <li class="nav-item">
            <a data-toggle="tab" href="#tabOwnerMapping" class="nav-link">@Localization.LabelOwnerMapping</a>
        </li>
        <li class="nav-item">
            <a data-toggle="tab" href="#tabOptions" class="nav-link">@Localization.LabelOptions</a>
        </li>
    </ul>
    <div class="tab-content p-3 mb-3">
        <div class="tab-pane active" id="tabDataSources">
            <div class="row">
                <div class="col-6">
                    @await Html.PartialAsync("_DatabaseProviderOptions", Model.Project.SourceProviderOptions, new ViewDataDictionary(this.ViewData)
                    {
                        { "Title", Localization.LabelSource },
                        { "Prefix", CompareDirection.Source},
                    })
                </div>
                <div class="col-6">
                    @await Html.PartialAsync("_DatabaseProviderOptions", Model.Project.TargetProviderOptions, new ViewDataDictionary(this.ViewData)
                    {
                        { "Title", Localization.LabelTarget },
                        { "Prefix", CompareDirection.Target},
                    })
                </div>
            </div>
        </div>
        <div class="tab-pane" id="tabTableMapping">
            <p>TODO</p>
        </div>
        <div class="tab-pane" id="tabOwnerMapping">
            <p>TODO</p>
        </div>
        <div class="tab-pane" id="tabOptions">
            <div class="row">
                <div class="col-12">

                    <div class="form-group">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text min-width-100">@Localization.LabelIgnoreCollate</span>
                            </div>
                            <label class="switch">
                                @{
                                    @:<input type="checkbox" name="ProjectOptions[Scripting[IgnoreCollate]]" data-value-type="boolean" @(Model.Project.Options.Scripting.IgnoreCollate ? "checked=\"checked\"" : "")>
                                }
                                <span class="slider round"></span>
                            </label>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text min-width-100">@Localization.LabelOrderColumnAlphabetically</span>
                            </div>
                            <label class="switch">
                                @{
                                    @:<input type="checkbox" name="ProjectOptions[Scripting[OrderColumnAlphabetically]]" data-value-type="boolean" @(Model.Project.Options.Scripting.OrderColumnAlphabetically ? "checked=\"checked\"" : "")>
                                }
                                <span class="slider round"></span>
                            </label>
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text min-width-100">@Localization.LabelUseSchemaName</span>
                            </div>
                            <label class="switch">
                                @{
                                    @:<input type="checkbox" name="ProjectOptions[Scripting[UseSchemaName]]" data-value-type="boolean" @(Model.Project.Options.Scripting.UseSchemaName ? "checked=\"checked\"" : "")>
                                }
                                <span class="slider round"></span>
                            </label>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

<div class="float-right">
    <button style="@ButtonStyle.Primary" onclick="Project.EditAndCompare()">
        @Localization.ButtonCompareNow
    </button>
    @if (Model.Project.Result != null)
    {
        <button style="@ButtonStyle.Secondary" onclick="Utility.CloseModalDialog()">@Localization.ButtonCancel</button>
    }
    else
    {
        <button style="@ButtonStyle.Secondary" onclick="Project.Close(true)">@Localization.ButtonCancel</button>
    }
</div>
