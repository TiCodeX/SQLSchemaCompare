@using Core.Enums
@using Core.Interfaces
@using Enums
@using Core.Entities.DatabaseProvider
@using Services
@model ADatabaseProviderOptions
@{
    var divId = Guid.NewGuid().ToString();
    var prefix = ((CompareDirection)ViewBag.Prefix).ToString();
    var editableDatabaseType = (bool)ViewBag.EditableDatabaseType;
}
<div class="card" id="@divId">
    <input type="hidden" name="Direction" value="@prefix">
    <div class="card-body pb-0">
        <h5 class="card-title text-center">@ViewBag.Title</h5>
        <p class="card-text">
            <div class="form-group">
                <label>@Localization.LabelType</label>
                @if (editableDatabaseType)
                {
                    <select name="@(prefix)DatabaseType" onchange="Project.HandleDatabaseTypeOnChange($(this), '@prefix')">
                        <option value="@((int) DatabaseType.MicrosoftSql)"
                                selected="@(Model is MicrosoftSqlDatabaseProviderOptions)">
                            Microsoft SQL Server
                        </option>
                        <option value="@((int) DatabaseType.MySql)"
                                selected="@(Model is MySqlDatabaseProviderOptions)">
                            MySQL Server
                        </option>
                        <option value="@((int) DatabaseType.PostgreSql)"
                                selected="@(Model is PostgreSqlDatabaseProviderOptions)">
                            PostgreSQL Server
                        </option>
                    </select>
                }
                else
                {
                    if (Model is MicrosoftSqlDatabaseProviderOptions)
                    {
                        <input type="hidden" name="@(prefix)DatabaseType" value="@((int) DatabaseType.MicrosoftSql)" />
                        <input type="text" disabled="@true" value="Microsoft SQL Server" />
                    }
                    else if (Model is MySqlDatabaseProviderOptions)
                    {
                        <input type="hidden" name="@(prefix)DatabaseType" value="@((int) DatabaseType.MySql)" />
                        <input type="text" disabled="@true" value="MySQL Server" />
                    }
                    else if (Model is PostgreSqlDatabaseProviderOptions)
                    {
                        <input type="hidden" name="@(prefix)DatabaseType" value="@((int) DatabaseType.PostgreSql)" />
                        <input type="text" disabled="@true" value="PostgreSQL Server" />
                    }
                }
            </div>
            <div class="form-group">
                <label>@Localization.LabelHostname</label>
                <input type="text" name="@(prefix)Hostname" value="@Model.Hostname"
                       oninput="Project.SetDirtyState()">
            </div>
            <div class="form-group">
                <label>@Localization.LabelUsername</label>
                <input type="text" name="@(prefix)Username" value="@Model.Username"
                       disabled="@(Model is MicrosoftSqlDatabaseProviderOptions a && a.UseWindowsAuthentication)"
                       oninput="Project.SetDirtyState()">
            </div>
            <div class="form-group">
                <label>@Localization.LabelPassword</label>
                <input type="password" name="@(prefix)Password" value="@Model.Password"
                       disabled="@(Model is MicrosoftSqlDatabaseProviderOptions b && b.UseWindowsAuthentication)"
                       oninput="Project.SetDirtyState()">
            </div>

            <div class="form-group row" style="@(Model is MicrosoftSqlDatabaseProviderOptions ? string.Empty: "display: none;")">
                <div class="col-9">
                    <label>@Localization.LabelUseWindowsAuthentication</label>
                </div>
                <div class="col-3 text-right">
                    <label class="tcx-switch">
                        <input type="checkbox" name="@(prefix)UseWindowsAuthentication"
                               data-value-type="boolean"
                               checked="@(Model is MicrosoftSqlDatabaseProviderOptions c && c.UseWindowsAuthentication)"
                               onchange="Project.HandleUseWindowsAuthenticationOnChange($(this), '@prefix')">
                        <span class="tcx-switch-slider"></span>
                    </label>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-9">
                    <label>@Localization.LabelUseSSL</label>
                </div>
                <div class="col-3 text-right">
                    <label class="tcx-switch">
                        <input type="checkbox" name="@(prefix)UseSSL"
                               data-value-type="boolean"
                               checked="@Model.UseSSL"
                               onchange="Project.SetDirtyState()">
                        <span class="tcx-switch-slider"></span>
                    </label>
                </div>
            </div>
            <div class="form-group ">
                <label>@Localization.LabelDatabase</label>
                <div class="input-group input-group-sm">
                    <select name="@(prefix)Database" class="editable-select" onchange="Project.SetDirtyState()">
                        @if (!string.IsNullOrEmpty(Model.Database))
                        {
                            <option value="@Model.Database" selected>@Model.Database</option>
                        }
                    </select>
                    <div class="input-group-append">
                        <button style="@ButtonStyle.Primary" onclick="Project.LoadDatabaseSelectValues($(this), '@(prefix)Database', '@divId');">
                            <span class="fa fa-sync-alt"></span>
                        </button>
                    </div>
                </div>
            </div>
        </p>
    </div>
</div>